{
  "author": {
    "name": "Adam Rudd",
    "email": "adam.rudd@uqconnect.edu.au"
  },
  "name": "mqttjs",
  "description": "A library for the MQTT protocol",
  "version": "0.1.8",
  "keywords": [
    "mqtt",
    "publish/subscribe",
    "publish",
    "subscribe"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/adamvr/MQTT.js.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "bin": {
    "mqtt_pub": "./bin/mqtt_pub",
    "mqtt_sub": "./bin/mqtt_sub"
  },
  "engines": {
    "node": ">=0.6.5"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "readme": "mqtt.js\n=======\n\nIntroduction\n------------\nmqtt.js library for the MQTT protocol, written in javascript.\nIt allows the creation of both MQTT clients and MQTT brokers\nthrough the `createClient` and `createServer` API methods.\n\nMuch of this document requires an understanding of the MQTT protocol,\nso consult the [MQTT documentation](http://mqtt.org/documentation)\nfor more information.\n\nInstallation\n------------\n\n    npm install mqttjs\n\nClients\n-------\nThis project also contains two extremely simple MQTT clients `bin/mqtt_pub`\nand `bin/mqtt_sub` can be executed from the command line in the following ways:\n\n    mqtt_pub <port> <host> <topic> <payload>\n    mqtt_sub <port> <host> <topic>\n\nwhere\n\n* `port` is the port the MQTT server is listening on\n* `host` is the MQTT server's host\n* `topic` is the topic to publish/subscribe to\n* `payload` is the payload to publish\n\nThese are expected to improve as the project goes on.\n\nServer API usage\n------------\nA broadcast server example, included in `examples/broadcast.js`:\n\n    var mqtt = require('../mqtt');\n\n    mqtt.createServer(function(client) {\n      var self = this;\n\n      if (!self.clients) self.clients = {};\n\n      client.on('connect', function(packet) {\n        client.connack({returnCode: 0});\n        client.id = packet.client;\n        self.clients[client.id] = client;\n      });\n\n      client.on('publish', function(packet) {\n        for (var k in self.clients) {\n          self.clients[k].publish({topic: packet.topic, payload: packet.payload});\n        }\n      });\n\n      client.on('subscribe', function(packet) {\n        var granted = [];\n        for (var i = 0; i < packet.subscriptions.length; i++) {\n          granted.push(packet.subscriptions[i].qos);\n        }\n\n        client.suback({granted: granted});\n      });\n\n      client.on('pingreq', function(packet) {\n        client.pingresp();\n      });\n\n      client.on('disconnect', function(packet) {\n        client.stream.end();\n      });\n\n      client.on('close', function(err) {\n        delete self.clients[client.id];\n      });\n\n      client.on('error', function(err) {\n        client.stream.end();\n        util.log('error!');\n      });\n    }).listen(1883);\n\nClient API usage\n----------------\n\nA basic publish client, the basis for `bin/mqtt_pub`:\n\n    var mqtt = require('../lib/mqtt');\n\n    var argv = process.argv;\n\n    for (var i = 2; i <= 5; i++) {\n      if(!argv[i]) process.exit(-1);\n    }\n\n    var port = argv[2],\n      host = argv[3],\n      topic = argv[4],\n      payload = argv[5];\n\n    mqtt.createClient(port, host, function(err, client) {\n      if (err) process.exit(1);\n      client.connect({keepalive: 3000});\n\n      client.on('connack', function(packet) {\n        if (packet.returnCode === 0) {\n          client.publish({topic: topic, payload: payload});\n          client.disconnect();\n        } else {\n          console.log('connack error %d', packet.returnCode);\n          process.exit(-1);\n        }\n      });\n\n      client.on('close', function() {\n        process.exit(0);\n      });\n\n      client.on('error', function(e) {\n        console.log('error %s', e);\n        process.exit(-1);\n      });\n    });\n\n# API\nThe `mqtt` module provides two methods for creating MQTT servers and clients\nas specified below:\n\n## mqtt.createServer(listener)\nCreates a new `mqtt.Server`. The listener argument is set as a listener for\nthe `client` event. \n\n## mqtt.createClient([port], [host], [callback(error, client)])\nCreates a new `mqtt.Client` and connects it to the specified `port` and `host`.\nIf `port` and `host` are omitted `1883` and `localhost` will be assumed for \neach respectively.\n\nWhen the client is connected, the `connected` event will be fired and `callback`\nwill be called, if supplied. If connection fails for any reason, the error\nparameter of callback will bet set to the error. Otherwise it will be null\nand the client parameter will be the newly created client.\n\n* * *\n\n##mqtt.Server\nThe `mqtt.Server` class represents an MQTT server.\n\n`mqtt.Server` extends `net.Server` and so shares all of its methods with the\ndistinction that the `net.Server#connected` event is caught and the `client`\nevent is fired.\n\n### Event: 'client'\n`function(client) {}`\nEmitted when a new TCP connection is received. `client` is an instance of\n`mqtt.Client`.\n\n* * *\n\n##mqtt.Client\nThe `mqtt.Client` class represents a connected MQTT client, be it on the server\nor client side.\n\nIt is preferred that `mqtt.Client`s be constructed using the `mqtt.createClient`\nfactory method.\n\nFor all methods below invalid `options` will cause the method to return `false`.\n\nFor all events below `packet` will also contain all of the information contained\nin the MQTT static header. This includes `cmd`, `dup`, `qos` and `retain` even\nwhen they do not apply to the packet. It will also contain the `length` of the packet.\n\n###client.connect([options])\nSend an MQTT connect packet.\n\n`options` is an object with the following defaults:\n    \n    { \"version\": \"MQIsdp\",\n      \"versionNum\": 3,\n      \"keepalive\": 60,\n      \"client\": \"mqtt_\" + process.pid,\n    }\n\n`options` supports the following properties:\n\n* `version`: version string, defaults to `MQIsdp`. Must be a `string`\n* `versionNum`: version number, defaults to `3`. Must be a `number`\n* `keepalive`: keepalive period, defaults to `60`. Must be a `number` between `0` and `65535`\n* `client`: the client ID supplied for the session, defaults to `mqtt_<pid>`. `string`\n* `will`: the client's will message options. `object` that supports the following properties:\n  * `topic`: the will topic\n  * `payload`: the will payload\n  * `qos`: the qos level to publish the will message with\n  * `retain`: whether or not to retain the will message\n* `clean`: the 'clean start' flag. `boolean`\n* `username`: username for protocol v3.1. `string`\n* `password`: password for protocol v3.1. `string`\n\n###client.connack([options])\nSend an MQTT connack packet.\n\n`options` is an object with the following defaults:\n\n    { \"returnCode\": 0 }\n\n`options` supports the following properties:\n\n* `returnCode`: the return code of the connack, defaults to `0`. Must be a `number` between `0` and `5`\n\n###client.publish([options])\nSend an MQTT publish packet.\n\n`options` is an object with the following defaults:\n\n    { \"messageId\": Math.floor(65535 * Math.random()),\n      \"payload\": \"\",\n      \"qos\": 0,\n      \"retain\": false\n    }\n\n`options` supports the following properties:\n\n* `topic`: the topic to publish to. `string`\n* `payload`: the payload to publish, defaults to an empty buffer. `string` or `buffer`\n* `qos`: the quality of service level to publish on. `number` between `0` and `2`\n* `messageId`: the message ID of the packet, defaults to a random integer between `0` and `65535`. `number`\n* `retain`: whether or not to retain the published message. `boolean`\n\n###client.\\['puback', 'pubrec', 'pubcomp', 'unsuback'\\]([options])\nSend an MQTT `[puback, pubrec, pubcomp, unsuback]` packet.\n\n`options` supports the following properties:\n\n* `messageId`: the ID of the packet\n\n###client.pubrel([options])\nSend an MQTT pubrel packet.\n\n`options` is an object with the following defaults:\n\n    { \"dup\": false }\n\n`options` supports the following properties:\n\n* `dup`: duplicate message flag\n* `messageId`: the ID of the packet\n\n###client.subscribe([options])\nSend an MQTT subscribe packet.\n\n`options` is an object with the following defaults:\n\n    { \"dup\": false,\n      \"messageId\": Math.floor(65535 * Math.random())\n    }\n\n`options` supports the following properties:\n\n* `dup`: duplicate message flag\n* `messageId`: the ID of the packet\n\nAnd either:\n\n* `topic`: the topic to subscribe to\n* `qos`: the requested QoS subscription level\n\nOr:\n\n* `subscriptions`: a list of subscriptions of the form `[{topic: a, qos: 0}, {topic: b, qos: 1}]` or of the form ['a', 'b']\n\n###client.suback([options])\nSend an MQTT suback packet.\n\n`options` is an object with the following defaults:\n\n    { \"granted\": [0],\n      \"messageId\": Math.floor(65535 * Math.random())\n    }\n\n`options` supports the following properties:\n\n* `granted`: a vector of granted QoS levels, of the form `[0, 1, 2]`\n* `messageId`: the ID of the packet\n\n###client.unsubscribe([options])\nSend an MQTT unsubscribe packet.\n\n`options` is an object with the following defaults:\n\n    { \"messageId\": Math.floor(65535 * Math.random()) }\n\n`options` supports the following properties:\n\n* `messageId`: the ID of the packet\n* `dup`: duplicate message flag\n\nAnd either:\n\n* `topic`: the topic to unsubscribe from\n\nOr:\n\n* `unsubscriptions`: a list of topics to unsubscribe from, of the form `[\"topic1\", \"topic2\"]`\n\n###client.\\['pingreq', 'pingresp', 'disconnect'\\]()\nSend an MQTT `[pingreq, pingresp, disconnect]` packet.\n\n###Event: 'connected'\n`function() {}`\n\nEmitted when the socket underlying the `mqtt.Client` is connected.\n\nNote: only emitted by clients created using `mqtt.createClient()`.\n\n###Event: 'connect'\n`function(packet) {}`\n\nEmitted when an MQTT connect packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `version`: the protocol version string\n* `versionNum`: the protocol version number\n* `keepalive`: the client's keepalive period\n* `client`: the client's ID\n* `will`: an object of the form:\n  \n    `{ \"topic\": \"topic\",\n      \"payload\": \"payload\",\n      \"retain\": false,\n      \"qos\": 0\n    }`\n\n  where `topic` is the client's will topic, `payload` is its will message,\n  `retain` is whether or not to retain the will message and `qos` is the\n  QoS of the will message.\n\n* `clean`: clean start flag\n* `username`: v3.1 username\n* `password`: v3.1 password\n\n###Event: 'connack'\n`function(packet) {}`\n\nEmitted when an MQTT connack packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `returnCode`: the return code of the connack packet\n\n###Event: 'publish'\n`function(packet) {}`\n\nEmitted when an MQTT publish packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `topic`: the topic the message is published on\n* `payload`: the payload of the message\n* `messageId`: the ID of the packet\n* `qos`: the QoS level to publish at\n\n###Events: \\['puback', 'pubrec', 'pubrel', 'pubcomp', 'unsuback'\\]\n`function(packet) {}`\n\nEmitted when an MQTT `[puback, pubrec, pubrel, pubcomp, unsuback]` packet\nis received by the client.\n\n`packet` is an object that may contain the property:\n\n* `messageId`: the ID of the packet\n\n###Event: 'subscribe'\n`function(packet) {}`\n\nEmitted when an MQTT subscribe packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `subscriptions`: a list of topics and their requested QoS level, of the form `[{topic: 'a', qos: 0},...]`\n\n###Event: 'suback'\n`function(packet) {}`\n\nEmitted when an MQTT suback packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `granted`: a vector of granted QoS levels\n\n###Event: 'unsubscribe'\n`function(packet) {}`\n\nEmitted when an MQTT unsubscribe packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `unsubscriptions`: a list of topics the client is unsubscribing from, of the form `[topic1, topic2, ...]`\n\n###Events: \\['pingreq', 'pingresp', 'disconnect'\\]\n`function(packet){}`\n\nEmitted when an MQTT `[pingreq, pingresp, disconnect]` packet is received.\n\n`packet` is an empty object and can be ignored.\n",
  "_id": "mqttjs@0.1.8",
  "dist": {
    "shasum": "055706c2d7de05015eddaaaec18f4f80b7b29bf6"
  },
  "_from": "mqttjs@*"
}
